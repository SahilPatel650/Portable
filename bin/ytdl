#!/bin/bash
#####UPDATE THIS- Folder must have 'downloads' and 'playlists' subdirectories###### 
cd ~/Music
musicFolder="$(pwd)"

#declare functions
progComplete() {
    if [ "$ptitle" == "NA" ]
    then
        progressBar 1 1
    fi
}


####### Main download workflow #######
getPlaylistName(){
    #UPDATE THIS
    downloadFolder="${musicFolder}/download"
    mkdir -p "$downloadFolder"
    cd "$downloadFolder"

    echo "Getting information..."
    name=$(yt-dlp --yes-playlist --playlist-items 1 -o "%(playlist_title)s" --get-filename "$link")
    ptitle="${name##*$'\r'}"
}

makePlaylistDir(){
    mkdir -p "$ptitle"
    rm -f posfile
    cd "$ptitle"
}


downloadAudio(){
    echo "Downloading Audio:"

    if [[ "$link" == *"https://music.youtube.com"* ]]; then
        m4aOptions+=( -f "bestaudio[ext=m4a]" )
    else
        m4aOptions+=( -f "bestaudio" )
    fi

    if [[ "$ptitle" == "Album"* ]]; then
        m4aOptions+=( --parse-metadata "playlist_index:%(track_number)s" )
    fi

    yt-dlp "${m4aOptions[@]}" " $link"
    #add this to put disk order: --parse-metadata "playlist_index:%(track_number)s"
    #regex: ^\[download\]\s*[a-zA-Z\s]*\K([0-9.]+\%|\d+ of \d+)
    echo -ne "\n"
}

cropArtwork(){
    #Crop the album art to be square
    ctpic=1
    totalpic=$(ls | grep -e ".webp" -e ".jpg" | wc -l)
    echo "Cropping images"

    if [[ "$(ls)" == *".jpg"* ]]; then
        for a in *.jpg
        do
            ffmpeg -i "$a" -loglevel error -y -an -q 0 -vf scale="'if(gt(iw,ih),-1,720):if(gt(iw,ih),720,-1)', crop=720:720:exact=1" "tmp_$a"
            mv "tmp_$a" "$a"
            progressBar $ctpic $totalpic
            ctpic=$(($ctpic + 1))
        done
    fi

    if [[ "$(ls)" == *".webp"* ]]; then
        for a in *.webp
        do
            b=${a%.webp}.jpg
            #echo "expected name: $b"
                ffmpeg -i "$a" -loglevel error -y -an -q 0 -vf scale="'if(gt(iw,ih),-1,720):if(gt(iw,ih),720,-1)', crop=720:720:exact=1" "tmp_$b"
            #echo "cropped $a to tmp_$b"
            mv "tmp_$b" "$b"
            #echo "moved tmp_$b to $b"
            progressBar $ctpic $totalpic
            ctpic=$(($ctpic + 1))
        done
    fi

    echo -ne "\n"
    rm -f *.webp
}
fixDate(){
    #Fix 8 digit yyyymmdd to 4 digit yyyy
    echo "Fixing Date"
    ctdate=1
    totaldate=$(ls | grep ".m4a" | wc -l)
    for a in *.m4a
    do
        date=$(mediainfo "$a" | grep "Recorded date" | tr -dc '0-9')
        if [ "$date" == "" ]
        then
            #echo "$a has no date"
            continue
        fi
        if [ ${#date} == 4 ]
        then
            #echo "$a has correctly formatted date"
            continue
        fi

        #echo "Date: $date"
        cdate=$(mediainfo "$a" | grep "Recorded date" | tr -dc '0-9' | cut -c1-4)
        #echo "Correct Date: $cdate"

        AtomicParsley "$a" --year "$cdate" --overWrite | grep -q "string"
        progressBar $ctdate $totaldate
        ctdate=$(($ctdate + 1))
    done
    progComplete
    echo -ne "\n"
}

embedArtwork(){
    #embed the artwork
    echo "Embeding Artwork"
    ctart=0
    totalart=$(ls | grep -e ".m4a" | wc -l)
    for a in *.m4a
    do
        if [ ! -f "${a%.m4a}.jpg" ] 
        then
            #echo "${a%.m4a}.jpg does not exist"
            ctart=$(($ctart + 1))
            continue
        fi
        AtomicParsley "$a" --artwork "${a%.m4a}.jpg" --overWrite | grep -q "string"
        #echo "embedded ${a%.m4a}.jpg into $a"
        ctart=$(($ctart + 1))
        progressBar $ctart $totalart
    done
    echo -ne "\n"
}

cleanup(){
    sleep 2
    rm -f *.jpg
    rm -f posfile

    echo ""
    echo "finished"
}

####### Main [default] download workflow completed #######

rmDup(){
    echo "\nRemoving Duplicates"
    playlistItems="$(ls)"
    echo playlistItems > logfile
    pfile="$ptitle.m3u" 
    echo "#EXTM3U" > "$pfile" 

    fullpaths1="$(find /Users/Sahil/Music/Music -type f -regex ".*\.m4a")"
    fullpaths2="$(find /Users/Sahil/Music/Music -type f -regex ".*\.mp3")"
    fullpaths="${fullpaths1}\n${fullpaths2}"

    while IFS="" read -r p || [ -n "$p" ]
    do
        libItem="$(basename "$p")"
        while read songExt
        do
            song="${songExt%.*}"
            #echo "$song .... $p"

            if [[ "$libItem" ==  *"$song"* ]]
            then
                #echo "$songExt and $p are a match"
                echo "$p" >> "$pfile"
                echo "removing $songExt"
                rm "$songExt"
            fi
        done <<< "$playlistItems"
    done <<< "$fullpaths"
    mv "$pfile" "${musicFolder}/playlists"
}

downloadPlaylist(){
    getPlaylistName
    rm posfile
    cd "${musicFolder}/playlists"

    playlistItems="$(orig-yt-dlp -f "bestaudio[ext=m4a]" -ciw -o "%(title)s.%(ext)s" --get-filename --skip-download "$link")"
    pfile="$ptitle.m3u" 
    echo "#EXTM3U" > "$pfile" 

    fullpaths1="$(find /Users/Sahil/Music/Music -type f -regex ".*\.m4a")"
    fullpaths2="$(find /Users/Sahil/Music/Music -type f -regex ".*\.mp3")"
    fullpaths="${fullpaths1}\n${fullpaths2}"

    echo playlistItems > logfile

    while IFS="" read -r p || [ -n "$p" ]
    do
        libItem="$(basename "$p")"
        while read songExt
        do
            song="${songExt%.*}"
            #echo "$song .... $p"

            if [[ "$libItem" ==  *"$song"* ]]
            then
                #echo "$songExt and $p are a match"
                echo "$p" >> "$pfile"
                echo "adding $songExt"
                #rm "$songExt"
            fi
        done <<< "$playlistItems"
    done <<< "$fullpaths"
    
}
convertSpotifyToYT(){
    if [[ "$link" == *"https://open.spotify.com/track/"* ]]; then
        echo "Only Spotify playlists are supported (Not Songs)"
        exit 7
    fi

    if [[ "$link" != *"https://open.spotify.com/playlist/"* ]]; then
        return 0
    fi

    echo "Converting to YT playlist"
    if [[ "$OSTYPE" == "darwin"* ]]; then
        output=$(ssh -T sahil@10.0.0.65 "cd vscode/spotify-to-ytmusic/; python3 YouTube.py -p "$link"")
    else
        cd ~/"vscode/spotify-to-ytmusic/" 
        output=$(python3 YouTube.py -p "$link")
    fi
    #echo "$output"

    loglines=$(echo "$output" | tail -n2)
    complete=$(echo "$loglines" | head -1)
    link=$(echo "$loglines" | tail -1)

    if [[ "$complete" != *"Success"* ]] || [[ "$link" != *"https://music.youtube.com/playlist"* ]]; then
        echo "Error, playlist not succesfully converted"
        exit 5
    fi
    echo "Converted playlist: $link"
    echo -ne "\n"
}


compile(){
    mkdir -p ~/".local/bin"
    cp ~/"vscode/Portable/bin/ytdl" ~/".local/bin"
    cd ~/"vscode/yt-dlp"
    make yt-dlp
    mv ~/".local/bin/yt-dlp" ~/".local/bin/.yt-dlp.old"
    mv yt-dlp ~/".local/bin"
}

help(){
    echo "ytdl is a cli script that allows you to download music from a source. \
It will square cropped album art and metadata. It can also convert a spotify playlist to YoutubeMusic \
so that it can be downloaded."
    echo -ne "\n"
    echo "Usage: ytdl [-h] [-c] [-n] [-p] [-r] link"
    echo "Optional arguments: 
-h          Show this help
-n          Add track numbering
-c          *Compile the custom yt-dlp binary
-p          *Download filenames only and find matches
-r          *Remove duplicate files and add them to a .m3u playlist

*: These are options that will only work with my specific setup. If anyone stumbles across this repo and is \
interested, I might be able to change the code to make them work for anyone- just create an issue."

}

verifyMacOS(){
    if [[ "$OSTYPE" != "darwin"* ]]; then
        echo "Must be using MacOS for this feature"
        exit 3
    fi
}
verifyLinux(){
    if [[ "$OSTYPE" != "linux-gnu"* ]]; then
        echo "Must be using linux for this feature"
        exit 4
    fi
}

###### Start code ######

link="${@: -1}"
m4aOptions=( -ciw -o "%(title)s.%(ext)s" --extract-audio --audio-format m4a --q --yes-playlist --write-thumbnail --add-metadata )

while getopts ":hcnpr" option; do
   case $option in
        h) # display Help
            help
            exit;;
        \?) # Invalid option
            echo "Error: Invalid option"
            exit 1;;
        c)
            verifyLinux
            compile
            exit 0;;
        
        p)
            verifyMacOS
            downloadPlaylist
            exit 0;;
        r)
            verifyMacOS
            shouldRm=true;;
        n)
            m4aOptions+=( --parse-metadata "playlist_index:%(track_number)s" );;
        
    esac
done

if [ "$link" == "" ]
then
    echo "Error: Must provide link"
    echo -ne "\n"
    help
    exit 2
fi

convertSpotifyToYT
getPlaylistName
makePlaylistDir
downloadAudio
cropArtwork
fixDate
embedArtwork
cleanup
if [ "$shouldRm" = true ]; then
    rmDup
fi